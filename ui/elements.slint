import { Functions } from "logic.slint";
import { Style } from "style.slint";

export enum ChevronDirection {
    up,
    down
}

export component Chevron inherits Rectangle {
    callback clicked <=> touch.clicked;
    in-out property<ChevronDirection> direction: up;

    // Actual chevron
    Path {
        fill: Functions.darken-hc(#32527b, touch.pressed, touch.has-hover);
        commands: direction == ChevronDirection.up ?
            "m49.373 0a3.0001 3.0001 0 0 0-2.2578 1.0449l-46.391 54a2.9998 2.9998 0 0 0 0.32031 4.2305 2.9998 2.9998 0 0 0 4.2305-0.32031l44.145-51.385 45.33 51.414a2.9998 2.9998 0 0 0 4.2344 0.26562 2.9998 2.9998 0 0 0 0.26562-4.2344l-47.607-54a3.0001 3.0001 0 0 0-2.2695-1.0156z" :
            "m3.1875 0.0058594a2.9998 2.9998 0 0 0-2.1719 0.74414 2.9998 2.9998 0 0 0-0.26562 4.2344l47.607 54a3.0001 3.0001 0 0 0 4.5273-0.0293l46.391-54a2.9998 2.9998 0 0 0-0.32031-4.2305 2.9998 2.9998 0 0 0-4.2305 0.32031l-44.145 51.385-45.33-51.414a2.9998 2.9998 0 0 0-2.0625-1.0098z";

        animate fill {
             duration: Style.fade-duration;
        }
    }

    // To allow clicking the chevron
    touch := TouchArea {}
}

export component CloseButton inherits Rectangle {
    background: Functions.darken-hc(#c00000, touch.pressed, touch.has-hover);
    border-radius: self.width / 8;
    out property<bool> has-hover: touch.has-hover;

    callback clicked <=> touch.clicked;

    animate background {
        duration: Style.fade-duration;
    }

    // White cross in button
    Path {
        width: 0.6 * parent.width; // Add padding
        fill: Functions.darken-hc(white, touch.pressed, touch.has-hover);
        // Created with Inkscape
        commands: "m 0.5,-0.5 a 1,1 0 0 0 -0.70703125,0.29296875 1,1 0 0 0 0,1.41406245 L 18.792969,20.207031 a 1,1 0 0 0 1.414062,0 1,1 0 0 0 0,-1.414062 L 1.2070312,-0.20703125 A 1,1 0 0 0 0.5,-0.5 Z M 0.49995465,0.49995465 19.500046,19.500045 M 19.5,-0.5 a 1,1 0 0 0 -0.707031,0.29296875 L -0.20703125,18.792969 a 1,1 0 0 0 0,1.414062 1,1 0 0 0 1.41406245,0 L 20.207031,1.2070312 a 1,1 0 0 0 0,-1.41406245 A 1,1 0 0 0 19.5,-0.5 Z m 0,0.99995731 L 0.49995731,19.500043";

        animate fill {
            duration: Style.fade-duration;
       }
    }

    // To allow clicking the close button
    touch := TouchArea {}
}

export component PowerButton inherits Rectangle {
    in-out property<bool> on: true;
    callback toggle(bool);

    background: Functions.darken-hc(on ? forestgreen : firebrick, touch.pressed, touch.has-hover);
    border-radius: self.width;

    animate background {
        duration: Style.fade-duration;
    }

    Path {
        height: 0.8 * parent.height; // Add padding
        fill: Functions.darken-hc(white, touch.pressed, touch.has-hover);
        commands: "m10 0a1.5 1.5 0 0 0-1.5 1.5v9a1.5 1.5 0 0 0 1.5 1.5 1.5 1.5 0 0 0 1.5-1.5v-9a1.5 1.5 0 0 0-1.5-1.5zm-5.3867 4.5059a1.4275 1.4275 0 0 0-1.041 0.32812c-3.217 2.6993-4.407 7.1358-2.9707 11.082 1.4363 3.9462 5.199 6.5801 9.3984 6.5801 4.1994 0 7.9621-2.6339 9.3984-6.5801 1.4363-3.9462 0.24626-8.3827-2.9707-11.082a1.4275 1.4275 0 0 0-2.0098 0.17578 1.4275 1.4275 0 0 0 0.17578 2.0117c2.3051 1.9342 3.1502 5.0904 2.1211 7.918s-3.7058 4.7012-6.7148 4.7012c-3.009 0-5.6857-1.8736-6.7148-4.7012-1.0292-2.8276-0.18396-5.9838 2.1211-7.918a1.4275 1.4275 0 0 0 0.17578-2.0117 1.4275 1.4275 0 0 0-0.96875-0.50391z";

        animate fill {
            duration: Style.fade-duration;
        }
    }

    touch := TouchArea {
        clicked => {
            on = !on;
            toggle(on);
        }
    }
}


export component Heat {
    in-out property<bool> heating;
    in-out property<color> color: #ed3b51;
    in-out property<color> secondary-color: #e95f6a;

    // Left swirl
    Path {
        x: -0.2 * parent.width;
        width: 80%;
        height: self.width;
        fill: secondary-color;
        commands: "m7.7292 4.6188c-3.4186 3.8087-4.919 7.7417-4.9645 11.776-0.03757 3.331 0.4002 6.7615 0.92363 10.102 0.76719 4.8965 2.2147 8.7175-0.92363 15.009-2.3993 4.8099-4.3808 8.6059-0.83543 8.1244 4.03-0.54738 6.9581-2.5383 9.8408-6.2194 2.8965-3.6987 4.5604-8.8322 3.81-16.625-0.79265-8.2314-1.4569-7.1986-1.5586-11.199-0.09135-3.593 0.53486-4.7654 2.1359-10.102 1.5586-5.1954 0.90756-5.4425-0.34636-5.4841-1.1066-0.036656-5.2147 1.4239-8.0818 4.6182z";
    }

    // Middle swirl
    Path {
        x: 0px;
        height: self.width;
        fill: root.color;
        commands: "m7.7292 4.6188c-3.4186 3.8087-4.919 7.7417-4.9645 11.776-0.03757 3.331 0.4002 6.7615 0.92363 10.102 0.76719 4.8965 2.2147 8.7175-0.92363 15.009-2.3993 4.8099-4.3808 8.6059-0.83543 8.1244 4.03-0.54738 6.9581-2.5383 9.8408-6.2194 2.8965-3.6987 4.5604-8.8322 3.81-16.625-0.79265-8.2314-1.4569-7.1986-1.5586-11.199-0.09135-3.593 0.53486-4.7654 2.1359-10.102 1.5586-5.1954 0.90756-5.4425-0.34636-5.4841-1.1066-0.036656-5.2147 1.4239-8.0818 4.6182z";
    }

    // Right swirl
    Path {
        x: 0.4 * parent.width;
        width: 80%;
        height: self.width;
        fill: secondary-color;
        commands: "m7.7292 4.6188c-3.4186 3.8087-4.919 7.7417-4.9645 11.776-0.03757 3.331 0.4002 6.7615 0.92363 10.102 0.76719 4.8965 2.2147 8.7175-0.92363 15.009-2.3993 4.8099-4.3808 8.6059-0.83543 8.1244 4.03-0.54738 6.9581-2.5383 9.8408-6.2194 2.8965-3.6987 4.5604-8.8322 3.81-16.625-0.79265-8.2314-1.4569-7.1986-1.5586-11.199-0.09135-3.593 0.53486-4.7654 2.1359-10.102 1.5586-5.1954 0.90756-5.4425-0.34636-5.4841-1.1066-0.036656-5.2147 1.4239-8.0818 4.6182z";
    }
}

// An image with a filter color.
// Achieved by overlaying the image with a copy of itself.
// The bottom image is colorized (meaning its alpha channel is used as a mask for the color)
// and the top image is made transparent. This combines the color of the bottom image with
// the top, achieving a filter effect.
export component ImageWithFilter {
    in property<image> source;
    in property<color> filter-color;
    in property<float> filter-intensity;

    // Filter
    Image {
        width: parent.width;
        height: parent.height;
        colorize: filter-color;
        source: source;
    }

    // Image
    Image {
        width: parent.width;
        height: parent.height;
        opacity: 1 - filter-intensity;
        source: source;
    }
}

export component Title inherits Text {
    horizontal-alignment: center;
    text: "Thermostat";
    font-size: 30px;
    font-weight: 600;
    color: Style.title-color;
}

export component OnTopIcon {
    in-out property<brush> fill: white;

    Path {
        fill: parent.fill;
        commands: "m0 0h24v2.5h-24zm12 4.0008s-0.49874-0.22406-8.4398 6.5045c-2.8872 2.4463-1.4756 4.8658 1.8547 2.8252 1.5129-0.92706 2.6217-1.5903 3.5217-2.1192v15.797c0 1.0999 0.68582 1.9916 1.5317 1.9916h3.1052c0.82306 0 1.4903-0.86759 1.4903-1.9379v-15.851c0.90006 0.52898 2.0083 1.1922 3.5212 2.1192 3.3303 2.0407 4.7424-0.37878 1.8552-2.8252-7.9411-6.7286-8.4403-6.5045-8.4403-6.5045z";
    }
}

export component OnTopButton {
    callback toggled(bool);

    in-out property<bool> on: false;
    in-out property<brush> color: white;

    OnTopIcon {
        width: parent.width;
        height: parent.height;
        fill: Functions.darken-hc(on ? color : color.darker(0.4), touch.pressed, touch.has-hover);

        animate fill {
            duration: Style.fade-duration;
        }
    }

    touch := TouchArea {
        clicked => {
            on = !on;
            toggled(on);
        }
    }
}
