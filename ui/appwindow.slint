import { Button, VerticalBox, GridBox, HorizontalBox, GroupBox, Switch, LineEdit } from "std-widgets.slint";
import { Chevron, ChevronDirection, CloseButton, PowerButton, Heat , ImageWithFilter, Title, OnTopButton} from "elements.slint";
import { Singletons, Config, State } from "logic.slint";
import { Style } from "style.slint";

export { Singletons, Config, State } // Re-export the logic so it can be referenced from Rust.

export component AppWindow inherits Window {
    title: "Thermostat";
    icon: @image-url("../assets/icon.png");
    width: 300px;
    height: 400px;
    background: transparent;
    no-frame: true;
    always-on-top: Singletons.options.on-top;

    in property<bool> is-preview: true; // Whether we're in preview mode. Set to false in the Rust code.
    in-out property<float> window-opacity: 0.9;
    out property<bool> is-co2-focused: co2.has-focus;

    callback request-window-move(int, int);
    callback request-quit();
    callback request-config-change();
    callback focus-change(bool);
    callback key-pressed <=> focus.key-pressed;

    init => {
        focus.focus(); // Focus the window on startup
        Singletons.state.available = true; // Assume the thermostat is available until we know otherwise
    }

    public function hide-splash() {
        splash.opacity = 0; // Will be animated
    }

    // Area to drag the window
    TouchArea {
        moved => {
            root.request-window-move((self.mouse-x - self.pressed-x) / 1px, (self.mouse-y - self.pressed-y) / 1px);
        }
    }

    // Focus handler to handle key events
    focus := FocusScope {
        focus-changed-event => {
            root.focus-change(self.has-focus);
        }
    }

    // Content rectangle to handle window transparency.
    Rectangle {
        opacity: window-opacity;

        animate opacity {
            duration: 250ms;
        }

        // Background
        background-rect := Rectangle {
            background: Style.background-color;
            border-color: Style.border-color;
            border-width: 3px;
            border-radius: 10px;
        }

        splash := Rectangle {
            visible: !is-preview; // Hide in preview mode
            background: background-rect.background;
            border-radius: background-rect.border-radius;
            z: 1;

            // Recreate the border
            Rectangle {
                background: transparent;
                border-color: Style.border-color;
                border-radius: background-rect.border-radius;
                border-width: 3px;
                z: 2;
            }

            VerticalLayout {
                alignment: center;
                spacing: 10px;

                Title {}

                HorizontalLayout {
                    alignment: center;

                    Image {
                        width: 150px;
                        height: 150px;
                        source: @image-url("../assets/icon.png");
                    }
                }
            }

            animate opacity {
                duration: 250ms;
            }
        }

        Rectangle {
            x: 30px;
            y: 50px;
            z: 10;
            visible: !Singletons.state.available;
            width: parent.width - 60px;
            height: 40px;
            background: #80000080; // Dark red with 50% opacity
            border-color: red.darker(0.5);
            border-width: background-rect.border-width;
            border-radius: background-rect.border-radius;

            animate opacity {
                duration: Style.fade-duration;
            }

            Text {
                x: 16px;
                horizontal-alignment: left;
                text: "Thermostat is currently unavailable!";
            }

            CloseButton {
                width: 20px;
                height: 20px;
                background: self.has-hover ? white.with-alpha(0.2) : transparent;
                x: parent.width - 30px;

                clicked => {
                    parent.opacity = 0%;
                }
            }
        }

        // Icon
        ImageWithFilter {
            x: 40px;
            y: 12px;
            width: 26px;
            height: 26px;
            filter-color: black;
            filter-intensity: 0.125;
            source: @image-url("../assets/icon.png");
        }

        // Close button
        CloseButton {
            x: parent.width - 30px;
            y: 10px;
            width: 20px;
            height: 20px;
            
            clicked => {
                root.request-quit();
            }
        }

        OnTopButton {
            on: Singletons.options.on-top;
            color: lightgray;
            x: parent.width - 60px;
            y: 11px;
            width: 20px;
            height: 19px;

            toggled => {
                Singletons.options.on-top = self.on;
            }
        }

        // Box to align the title with rest of the content
        VerticalBox {
            // Title
            Title {
                height: 36px;
            }

            // Box to split switches and temperature/power button
            GridBox {
                // Current temperature
                HorizontalLayout {
                    alignment: center;
                    col: 0;
                    row: 0;
                    width: 130px;

                    GridLayout {
                        HorizontalLayout {
                            col: 0;
                            row: 0;
                            alignment: center;

                            Heat {
                                heating: Singletons.state.is-heating;
                                width: 70px;
                                opacity: self.heating ? 0.35 : 0;

                                animate opacity {
                                    duration: 150ms;
                                }
                            }
                        }
                        

                        VerticalLayout {
                            col: 0;
                            row: 0;
                            alignment: center;
                            padding-top: -17px; // Hack to align the text with the temperature
        
                            Text {
                                horizontal-alignment: center;
                                text: "Current";
                                font-size: 15px;
                                color: Style.text-color;
                            }
        
                            Text {
                                horizontal-alignment: center;
                                text: "\{Singletons.state.current-temp} °C";
                                font-size: 40px;
                                color: Style.text-color;
                            }
                        }
                    }
                }

                // Switches
                VerticalBox {
                    alignment: center;
                    col: 0;
                    row: 1;

                    // Force on switch
                    Switch {
                        checked: Singletons.config.force;
                        text: "Force on";

                        toggled => {
                            Singletons.config.force = self.checked;
                            root.request-config-change();
                        }
                    }

                    // Require CO₂ switch
                    require-co2 := Switch {
                        checked: Singletons.config.co2-target >= 0;
                        text: "Require CO₂";

                        toggled => {
                            Singletons.config.require-co2 = self.checked;
                            root.request-config-change();
                        }
                    }

                    // CO₂ target
                    HorizontalLayout {
                        width: 100px;
                        spacing: 5px;
                        co2 := LineEdit {
                            enabled: require-co2.checked;
                            input-type: number;
                            text: "\{Singletons.config.co2-target}";
                            width: 60px;
                            
                            accepted(content) => {
                                Singletons.config.co2-target = content.to_float();
                                root.request-config-change();
                            }
                        }

                        Text {
                            vertical-alignment: center;
                            horizontal-alignment: center;
                            height: 24px;
                            color: #ccced4; // Same color as the switches' text
                            text: "ppm CO₂";
                        }
                    }
                }

                // Target temperature
                VerticalBox {
                    alignment: center;
                    width: 150px;
                    col: 1;
                    row: 0;

                    property<length> chevron-size: 80px;

                    HorizontalLayout {
                        alignment: center;

                        Chevron {
                            width: chevron-size;
                            height: chevron-size / 2;
                            direction: up;

                            clicked => {
                                Singletons.config.target-temp += 0.5;
                                root.request-config-change();
                            }
                        }
                    }

                    Text {
                        horizontal-alignment: center;
                        text: "\{Singletons.config.target-temp} °C";
                        font-size: 40px;
                        color: Style.text-color;
                    }

                    HorizontalLayout {
                        alignment: center;

                        Chevron {
                            width: chevron-size;
                            height: chevron-size / 2;
                            direction: down;

                            clicked => {
                                Singletons.config.target-temp -= 0.5;
                                root.request-config-change();
                            }
                        }
                    }
                }

                // Power button
                HorizontalBox {
                    alignment: center;
                    col: 1;
                    row: 1;

                    PowerButton {
                        on: Singletons.config.master-switch;
                        width: 100px;
                        height: 100px;

                        toggle(state) => {
                            Singletons.config.master-switch = state;
                            root.request-config-change();
                        }
                    }
                }
            }
        }
    }
}
